/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.itlifter.employee.service.service.base;

import com.itlifter.employee.service.model.CompanyTypeMaster;
import com.itlifter.employee.service.service.CompanyTypeMasterLocalService;
import com.itlifter.employee.service.service.persistence.CompanyRequestPersistence;
import com.itlifter.employee.service.service.persistence.CompanyTypeMasterPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the company type master local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.itlifter.employee.service.service.impl.CompanyTypeMasterLocalServiceImpl}.
 * </p>
 *
 * @author Ashish
 * @see com.itlifter.employee.service.service.impl.CompanyTypeMasterLocalServiceImpl
 * @see com.itlifter.employee.service.service.CompanyTypeMasterLocalServiceUtil
 * @generated
 */
public abstract class CompanyTypeMasterLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CompanyTypeMasterLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.itlifter.employee.service.service.CompanyTypeMasterLocalServiceUtil} to access the company type master local service.
	 */

	/**
	 * Adds the company type master to the database. Also notifies the appropriate model listeners.
	 *
	 * @param companyTypeMaster the company type master
	 * @return the company type master that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CompanyTypeMaster addCompanyTypeMaster(
		CompanyTypeMaster companyTypeMaster) throws SystemException {
		companyTypeMaster.setNew(true);

		return companyTypeMasterPersistence.update(companyTypeMaster);
	}

	/**
	 * Creates a new company type master with the primary key. Does not add the company type master to the database.
	 *
	 * @param typeId the primary key for the new company type master
	 * @return the new company type master
	 */
	@Override
	public CompanyTypeMaster createCompanyTypeMaster(long typeId) {
		return companyTypeMasterPersistence.create(typeId);
	}

	/**
	 * Deletes the company type master with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param typeId the primary key of the company type master
	 * @return the company type master that was removed
	 * @throws PortalException if a company type master with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CompanyTypeMaster deleteCompanyTypeMaster(long typeId)
		throws PortalException, SystemException {
		return companyTypeMasterPersistence.remove(typeId);
	}

	/**
	 * Deletes the company type master from the database. Also notifies the appropriate model listeners.
	 *
	 * @param companyTypeMaster the company type master
	 * @return the company type master that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CompanyTypeMaster deleteCompanyTypeMaster(
		CompanyTypeMaster companyTypeMaster) throws SystemException {
		return companyTypeMasterPersistence.remove(companyTypeMaster);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CompanyTypeMaster.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return companyTypeMasterPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.itlifter.employee.service.model.impl.CompanyTypeMasterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return companyTypeMasterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.itlifter.employee.service.model.impl.CompanyTypeMasterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return companyTypeMasterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return companyTypeMasterPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return companyTypeMasterPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CompanyTypeMaster fetchCompanyTypeMaster(long typeId)
		throws SystemException {
		return companyTypeMasterPersistence.fetchByPrimaryKey(typeId);
	}

	/**
	 * Returns the company type master with the primary key.
	 *
	 * @param typeId the primary key of the company type master
	 * @return the company type master
	 * @throws PortalException if a company type master with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CompanyTypeMaster getCompanyTypeMaster(long typeId)
		throws PortalException, SystemException {
		return companyTypeMasterPersistence.findByPrimaryKey(typeId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return companyTypeMasterPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the company type masters.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.itlifter.employee.service.model.impl.CompanyTypeMasterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of company type masters
	 * @param end the upper bound of the range of company type masters (not inclusive)
	 * @return the range of company type masters
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CompanyTypeMaster> getCompanyTypeMasters(int start, int end)
		throws SystemException {
		return companyTypeMasterPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of company type masters.
	 *
	 * @return the number of company type masters
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCompanyTypeMastersCount() throws SystemException {
		return companyTypeMasterPersistence.countAll();
	}

	/**
	 * Updates the company type master in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param companyTypeMaster the company type master
	 * @return the company type master that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CompanyTypeMaster updateCompanyTypeMaster(
		CompanyTypeMaster companyTypeMaster) throws SystemException {
		return companyTypeMasterPersistence.update(companyTypeMaster);
	}

	/**
	 * Returns the company request local service.
	 *
	 * @return the company request local service
	 */
	public com.itlifter.employee.service.service.CompanyRequestLocalService getCompanyRequestLocalService() {
		return companyRequestLocalService;
	}

	/**
	 * Sets the company request local service.
	 *
	 * @param companyRequestLocalService the company request local service
	 */
	public void setCompanyRequestLocalService(
		com.itlifter.employee.service.service.CompanyRequestLocalService companyRequestLocalService) {
		this.companyRequestLocalService = companyRequestLocalService;
	}

	/**
	 * Returns the company request persistence.
	 *
	 * @return the company request persistence
	 */
	public CompanyRequestPersistence getCompanyRequestPersistence() {
		return companyRequestPersistence;
	}

	/**
	 * Sets the company request persistence.
	 *
	 * @param companyRequestPersistence the company request persistence
	 */
	public void setCompanyRequestPersistence(
		CompanyRequestPersistence companyRequestPersistence) {
		this.companyRequestPersistence = companyRequestPersistence;
	}

	/**
	 * Returns the company type master local service.
	 *
	 * @return the company type master local service
	 */
	public com.itlifter.employee.service.service.CompanyTypeMasterLocalService getCompanyTypeMasterLocalService() {
		return companyTypeMasterLocalService;
	}

	/**
	 * Sets the company type master local service.
	 *
	 * @param companyTypeMasterLocalService the company type master local service
	 */
	public void setCompanyTypeMasterLocalService(
		com.itlifter.employee.service.service.CompanyTypeMasterLocalService companyTypeMasterLocalService) {
		this.companyTypeMasterLocalService = companyTypeMasterLocalService;
	}

	/**
	 * Returns the company type master persistence.
	 *
	 * @return the company type master persistence
	 */
	public CompanyTypeMasterPersistence getCompanyTypeMasterPersistence() {
		return companyTypeMasterPersistence;
	}

	/**
	 * Sets the company type master persistence.
	 *
	 * @param companyTypeMasterPersistence the company type master persistence
	 */
	public void setCompanyTypeMasterPersistence(
		CompanyTypeMasterPersistence companyTypeMasterPersistence) {
		this.companyTypeMasterPersistence = companyTypeMasterPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.itlifter.employee.service.model.CompanyTypeMaster",
			companyTypeMasterLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.itlifter.employee.service.model.CompanyTypeMaster");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CompanyTypeMaster.class;
	}

	protected String getModelClassName() {
		return CompanyTypeMaster.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = companyTypeMasterPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.itlifter.employee.service.service.CompanyRequestLocalService.class)
	protected com.itlifter.employee.service.service.CompanyRequestLocalService companyRequestLocalService;
	@BeanReference(type = CompanyRequestPersistence.class)
	protected CompanyRequestPersistence companyRequestPersistence;
	@BeanReference(type = com.itlifter.employee.service.service.CompanyTypeMasterLocalService.class)
	protected com.itlifter.employee.service.service.CompanyTypeMasterLocalService companyTypeMasterLocalService;
	@BeanReference(type = CompanyTypeMasterPersistence.class)
	protected CompanyTypeMasterPersistence companyTypeMasterPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CompanyTypeMasterLocalServiceClpInvoker _clpInvoker = new CompanyTypeMasterLocalServiceClpInvoker();
}